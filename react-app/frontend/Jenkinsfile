pipeline {
    // agent {
    //     docker { image 'node:alpine' }
    // }
    // agent none
    agent any
    stages {
        stage('build') {
            // agent { docker 'node:alpine' }
            // environment {
            //     ATONG_PUB_SSH = credentials('ATONG_PUB_SSH')
            // }
            steps {
                echo 'Building...'
                sh '''
                    echo "changing working dir..."
                    cd react-app/frontend
                    echo "building docker app..."
                    docker build -t pataraco/react-app:dev -f Dockerfile.dev .
                '''
            }
        }
        stage('test') {
            // agent { docker 'node:alpine' }
            steps {
                echo 'Testing...'
                timeout(time: 3, unit: 'MINUTES') {
                    retry(5) {
                        sh 'docker run -e CI=true pataraco/react-app:dev npm test -- --coverage'
                    }
                }
            }
        }
        stage('deploy (staging)') {
            echo "GIT_BRANCH $GIT_BRANCH"
            echo "GIT_LOCAL_BRANCH $GIT_LOCAL_BRANCH"
            echo "GIT_URL $GIT_URL"
            echo "GIT_AUTHOR_NAME $GIT_AUTHOR_NAME"
            echo "GIT_COMMITTER_EMAIL $GIT_COMMITTER_EMAIL"
            when {
                branch 'origin/master'
            }
            // agent { docker 'node:alpine' }
            steps {
                echo 'Deploying Staging...'
                sh '/usr/local/bin/aws s3 ls'
                // region: us-east-1
                // app:    docker-react-app
                // env:    DockerReactApp-env
                // bucket: elasticbeanstalk-us-east-1-846715253217
                // key:    docker-react-app
                // branch: master
            }
        }
        // stage('sanity check') {
        //     steps {
        //         input "Did QA sign off on Staging?"
        //     }
        // }
        stage('deploy (production)') {
            // agent { docker 'node:alpine' }
            when {
                branch 'origin/master'
            }
            steps {
                echo 'Deploying Production...'
            }
        }
    }
    post {
        always {    /* this will always run */
            echo "All done!  8)"
            // The archive step is deprecated, please use archiveArtifacts instead.
            // /* collect test results and artifacts */
            // archive 'build/libs/**/*.jar'  /* grab built artifacts for local analysis/investigation */
            // hipchatSend room: 'Project Staging',
            //     message: "Pipeline run completed: ${currentBuild.fullDisplayName}",
            //     color: 'PURPLE'
        }
        success {    /* runs when successful */
            echo "Pipeline succeeded!  :)"
            // mail to: 'username@example.com',
            //     subject: "Jenkins: Executed Pipeline [SUCCESS]: ${currentBuild.fullDisplayName}",
            //     body: "Pipeline all done: ${env.BUILD_URL}\nStatus: Succeeded\n"
            // hipchatSend room: 'Project Staging',
            //     message: "Executed Pipeline [SUCCESS]: ${currentBuild.fullDisplayName}",
            //     color: 'GREEN'
        }
        unstable {    /*  runs when marked as unstable */
            echo "Pipeline is unstable.  :/"
        }
        failure {    /* runs if failed */
            echo "Pipeline failed!  :("
            // mail to: 'username@example.com',
            //     subject: "Jenkins: Executed Pipeline [FAILED]: ${currentBuild.fullDisplayName}",
            //     body: "Pipeline all done: ${env.BUILD_URL}\nStatus: Failed\n"
            // hipchatSend room: 'Project Staging',
            //     message: "Executed Pipeline [FAILED] - Job Name: ${env.JOB_NAME} - Job No. #${env.BUILD_NUMBER}",
            //     color: 'RED'
        }
        changed {    /* runs if state of Pipeline has changed, e.g. previously failed, but now succeeded */
            echo "Pipeline status changed.  :|"
        }
    }
}
