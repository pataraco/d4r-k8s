pipeline {
    agent any
    stages {
        stage('info') {
            steps {
                echo "git environment variables..."
                echo "  GIT_BRANCH $GIT_BRANCH"
                echo "  GIT_URL $GIT_URL"
                echo "  BRANCH_NAME $BRANCH_NAME"
                sh 'env | grep GIT'
            }
        }
        stage('build') {
            steps {
                echo "Building..."
                echo "TODO: Correctly configure -> Builds..."
                sh '''
                    cd fibo-web
                    # docker build -t pataraco/react-app:dev -f Dockerfile.dev .
                '''
            }
        }
        stage('test') {
            steps {
                echo "Testing..."
                echo "AWS access..."
                sh '/usr/local/bin/aws sts get-caller-identity'
                echo "TODO: Correctly configure -> Dev Tests..."
                # timeout(time: 3, unit: 'MINUTES') {
                #     retry(5) {
                #         sh 'docker run -e CI=true pataraco/react-app:dev npm test -- --coverage'
                #     }
                # }
            }
        }
        stage('deploy (staging)') {
            when { branch 'staging' }
            steps {
                echo "Deploying Staging..."
                echo "TODO: Correctly configure -> Deploying Staging..."
            }
        }
        stage('deploy (production)') {
            when {
                branch 'master'
            }
            steps {
                echo "Deploying Production..."
                echo "TODO: Correctly configure -> Deploying Production..."
                # TODO # sh 'cd fibo-web; /usr/local/bin/eb deploy docker-fibo-app-prod'
            }
        }
    }
    post {
        always {    /* this will always run */
            echo "All done!  8)"
        }
        success {    /* runs when successful */
            echo "Pipeline succeeded!  :)"
        }
        unstable {    /*  runs when marked as unstable */
            echo "Pipeline is unstable.  :/"
        }
        failure {    /* runs if failed */
            echo "Pipeline failed!  :("
        }
        changed {    /* runs if state of Pipeline has changed, e.g. previously failed, but now succeeded */
            echo "Pipeline status changed.  :|"
        }
    }
}
